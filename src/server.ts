/**
 * ## Simple server for EPUB generation
 *
 * It takes the parameters in a query string, generates and returns an epub to the caller.
 *
 * The query parameters are
 *
 * url              The URL for the content
 * respec           Whether the source is in respec (true) or a final HTML (false). Default is false
 * publishDate      Publication date
 * specStatus       Specification type
 * addSectionLinks  Add section links with "ยง"
 * maxTocLevel      Max TOC level
 *
 *
 * The module is a wrapper around a standard, node.js `http.CreateServer`, and a call to @@@@
 *
 * ### Usage examples:
 *
 * (In all examples, the URL for the server is set to `https://epub.example.org`)
 *
 * Convert the HTML file (as generated by ReSpec) to an EPUB 3.2 file. The generated publication's name is `short-name.epub`, where `short-name` is set in the ReSpec configuration:
 *
 * > `https://epub.example.org?url=https://www.example.org/doc.html`
 *
 * Convert the HTML _ReSpec source_ to an EPUB 3.2 file. The source is converted on-the-fly by respec:
 *
 * > `https://epub.example.org?url=https://www.example.org/doc.html&respec=true`
 *
 * Convert the HTML _ReSpec source_ to an EPUB 3.2 file, setting its spec status to REC. The source is converted on-the-fly by respec, overwriting the `specStatus` entry in the configuration to `REC`:
 *
 * > `https://epub.example.org?url=https://www.example.org/doc.html&respec=true&specStatus=REC`
 *
 * @packageDocumentation
 */


import http            from 'http';
import * as urlHandler from 'url';
import * as _          from 'underscore';
import * as constants  from './lib/constants';
import * as process    from './lib/process';

import { fetch_html, fetch_resource, fetch_type, URL } from './lib/fetch';


/**
 * Return value of [[get_epub]], to be handled by the server;
 */
interface Content {
    /**
     * The real epub content: a Buffer as generated through the [[OCF]] class
     */
    content :any;
    /**
     * Additional HTTP Response headers, to accompany the full response. (File name, dates, etc.)
     */
    header  :object;
}

/**
 * @hidden
 */
interface Query {
    [index :string] :string|string[]
}


/**
 * Generate the EPUB file. This is a wrapper around @@@@@
 *
 * @param query - The query string from the client
 * @throws - no URL has been specified
 */
async function get_epub(query :Query) : Promise<Content> {
    if (query.url === undefined) {
        throw "No URL has been specified"
    } else {
        const call_arguments :process.Arguments = {
            url    : query.url as string,
            respec : query.respec === undefined ? false : query.respec === 'true' || query.respec === 'True',
            config : _.omit(query, 'respec', 'url'),
        }

        // Take it from here!!!!!!

        const content  = await fetch_resource('https://www.w3.org/People/Ivan/TR_EPUB/CR.svg');
        return {
            content : content,
            header  : {
                'Content-type'        : constants.media_types.svg,
                'Content-Length'      : Buffer.byteLength(content),
                'Expires'             : (new Date()).toString(),
                'Content-Disposition' : 'attachment; filename=CR.svg'
            }
        }
    }
}


http.createServer( async (request :http.IncomingMessage, response :http.ServerResponse) => {
    try {
        const query :Query = urlHandler.parse(request.url, true).query;
        const the_book :Content = await get_epub(query);

        response.writeHead(200, _.extend(
            the_book.header,
            constants.CORS_headers
        ));
        response.write(the_book.content);
        response.end();
    } catch(e) {
        response.writeHead(400, {
            'Content-type' : 'text/plain'
        });
        response.write("Error during EPUB generation!\n\n")
        response.write(e.toString())
        response.end();
    }
}).listen('9000');

