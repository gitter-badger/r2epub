"use strict";
/**
 * ## Simple server for EPUB generation
 *
 * It takes the parameters in a query string, generates and returns an epub to the caller.
 *
 * The possible query parameters are
 *
 * ```
 * url              The URL for the content
 * respec           Whether the source is in respec (true) or a final HTML (false).
 * publishDate      Publication date
 * specStatus       Specification type
 * addSectionLinks  Add section links with "ยง"
 * maxTocLevel      Max TOC level
 *```
 *
 * By default, the value of `respec` is `false`. However, if one of `publishDate`, `specStatus`, `addSectionLinks`, or `maxTocLevel` are set, `respec=true` is implied (i.e., it is not necessary to set it explicitly).
 *
 *
 * The module is a wrapper around a standard node.js `http.CreateServer`, and a call to [[create_epub]].
 *
 * ### Usage examples:
 *
 * (In all examples, the URL for the server is set to `https://epub.example.org`)
 *
 * Convert the HTML file (as generated by ReSpec) to an EPUB 3.2 file. The generated publication's name is `short-name.epub`, where `short-name` is set in the ReSpec configuration:
 *
 * ```
 * https://epub.example.org?url=https://www.example.org/doc.html
 * ```
 *
 * Convert the HTML _ReSpec source_ to an EPUB 3.2 file. The source is converted on-the-fly by respec:
 *
 * ```
 * https://epub.example.org?url=https://www.example.org/doc.html&respec=true`
 * ```
 *
 * Convert the HTML _ReSpec source_ to an EPUB 3.2 file, setting its spec status to REC. The source is converted on-the-fly by respec, overwriting the `specStatus` entry in the configuration to `REC`:
 *
 * ```
 * https://epub.example.org?url=https://www.example.org/doc.html&respec=true&specStatus=REC`
 * ```

 * @packageDocumentation
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = __importDefault(require("http"));
const urlHandler = __importStar(require("url"));
const _ = __importStar(require("underscore"));
const constants = __importStar(require("./lib/constants"));
const conversion = __importStar(require("./lib/conversion"));
/**
 * Generate the EPUB file. This is a wrapper around [[create_epub]], creating the necessary arguments [[Arguments]] structure based on the incoming URL's query string.
 *
 * @param query - The query string from the client
 * @throws no URL has been specified
 */
async function get_epub(query) {
    if (query === null || query.url === undefined) {
        throw "No URL has been specified";
    }
    else {
        const respec_args = _.omit(query, 'respec', 'url');
        const document = {
            url: query.url,
            respec: (query.respec !== undefined && (query.respec === 'true' || query.respec === 'false')) || _.keys(respec_args).length != 0,
            config: respec_args,
        };
        const conversion_process = new conversion.RespecToEPUB(false, false);
        const the_ocf = await conversion_process.create_epub(document);
        const content = await the_ocf.get_content();
        return {
            content: content,
            headers: {
                'Content-type': constants.media_types.epub,
                // 'Content-Length'      : content.length,
                'Expires': (new Date()).toString(),
                'Content-Disposition': `attachment; filename=${the_ocf.name}`
            }
        };
    }
}
/**
 * Run a rudimentary Web server calling out to [[create_epub]] via [[get_epub]] to return an EPUB 3.2 instance when invoked.
 *
 * @param port - port number
 */
async function serve(port = constants.port_number) {
    http_1.default.createServer(async (request, response) => {
        try {
            const query = urlHandler.parse(request.url, true).query;
            const the_book = await get_epub(query);
            response.writeHead(200, _.extend(the_book.headers, constants.CORS_headers));
            response.write(the_book.content);
            response.end();
        }
        catch (e) {
            response.writeHead(400, {
                'Content-type': 'text/plain'
            });
            response.write(`Error during EPUB generation: ${e.toString()}`);
            response.end();
        }
    }).listen(port);
}
// Let the user choose the port number...
process.argv.length > 2 && isNaN(Number(process.argv[2])) === false ? serve(process.argv[2]) : serve();
//# sourceMappingURL=server.js.map